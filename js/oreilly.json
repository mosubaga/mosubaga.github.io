{
    "results": [
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492056348/",
            "title": "Fluent Python, 2nd Edition",
            "description": "<span><div><p>Don't waste time bending Python to fit patterns you've learned in other languages. Python's simplicity lets you become productive quickly, but often this means you aren't using everything the language has to offer. With the updated edition of this hands-on guide, you'll learn how to write effective, modern Python 3 code by leveraging its best ideas.</p><p>Discover and apply idiomatic Python 3 features beyond your past experience. Author Luciano Ramalho guides you through Python's core language features and libraries and teaches you how to make your code shorter, faster, and more readable.</p><p>Complete with major updates throughout, this new edition features five parts that work as five short books within the book:</p><ul><li><b>Data structures:</b> Sequences, dicts, sets, Unicode, and data classes</li><li><b>Functions as objects:</b> First-class functions, related design patterns, and type hints in function declarations</li><li><b>Object-oriented idioms:</b> Composition, inheritance, mixins, interfaces, operator overloading, protocols, and more static types</li><li><b>Control flow:</b> Context managers, generators, coroutines, async/await, and thread/process pools</li><li><b>Metaprogramming:</b> Properties, attribute descriptors, class decorators, and new class metaprogramming hooks that replace or simplify metaclasses</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098104023/",
            "title": "Python for Data Analysis, 3rd Edition",
            "description": "<span><div><p>Get the definitive handbook for manipulating, processing, cleaning, and crunching datasets in Python. Updated for Python 3.10 and pandas 1.4, the third edition of this hands-on guide is packed with practical case studies that show you how to solve a broad set of data analysis problems effectively. You'll learn the latest versions of pandas, NumPy, and Jupyter in the process.</p><p>Written by Wes McKinney, the creator of the Python pandas project, this book is a practical, modern introduction to data science tools in Python. It's ideal for analysts new to Python and for Python programmers new to data science and scientific computing. Data files and related material are available on GitHub.</p><ul><li>Use the Jupyter notebook and IPython shell for exploratory computing</li><li>Learn basic and advanced features in NumPy</li><li>Get started with data analysis tools in the pandas library</li><li>Use flexible tools to load, clean, transform, merge, and reshape data</li><li>Create informative visualizations with matplotlib</li><li>Apply the pandas groupby facility to slice, dice, and summarize datasets</li><li>Analyze and manipulate regular and irregular time series data</li><li>Learn how to solve real-world data analysis problems with thorough, detailed examples</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492051282/",
            "title": "Head First Python, 3rd Edition",
            "description": "<span><div><p><b>What will you learn from this book?</b></p><p>Want to learn the Python language without slogging your way through how-to manuals? With <i>Head First Python</i>, you'll quickly grasp Python's fundamentals by working with built-in data structures and functions. You'll build your very own web app, which—once it's ready for prime time—runs in the cloud. You'll learn how to wrangle data with Python, scrape data from the web, feed data to pandas, and interact with databases. This third edition is a complete learning experience that will help you become a bona fide Python programmer in no time.</p><p><b>What's so special about this book?</b></p><p>If you've read a Head First book, you know what to expect: a visually rich format designed for the way your brain works. If you haven't, you're in for a treat. With this book, you'll learn Python through a multisensory experience that engages your mind—rather than a text-heavy approach that puts you to sleep.</p></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098113544/",
            "title": "Python in a Nutshell, 4th Edition",
            "description": "<span><div><p>Python was recently ranked as today's most popular programming language on the TIOBE index, thanks to its broad applicability to design and prototyping to testing, deployment, and maintenance. With this updated fourth edition, you'll learn how to get the most out of Python, whether you're a professional programmer or someone who needs this language to solve problems in a particular field.</p><p>Carefully curated by recognized experts in Python, this new edition focuses on version 3.10, bringing this seminal work on the Python language fully up to date on five version releases, including preview coverage of upcoming 3.11 features.</p><p>This handy guide will help you:</p><ul><li>Learn how Python represents data and program as objects</li><li>Understand the value and uses of type annotations</li><li>Examine which language features appeared in which recent versions</li><li>Discover how to use modern Python idiomatically</li><li>Learn ways to structure Python projects appropriately</li><li>Understand how to debug Python code</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098140243/",
            "title": "Causal Inference in Python",
            "description": "<span><div><p>How many buyers will an additional dollar of online marketing bring in? Which customers will only buy when given a discount coupon? How do you establish an optimal pricing strategy? The best way to determine how the levers at our disposal affect the business metrics we want to drive is through causal inference.</p><p>In this book, author Matheus Facure, senior data scientist at Nubank, explains the largely untapped potential of causal inference for estimating impacts and effects. Managers, data scientists, and business analysts will learn classical causal inference methods like randomized control trials (A/B tests), linear regression, propensity score, synthetic controls, and difference-in-differences. Each method is accompanied by an application in the industry to serve as a grounding example.</p><p>With this book, you will:</p><ul><li>Learn how to use basic concepts of causal inference</li><li>Frame a business problem as a causal inference problem</li><li>Understand how bias gets in the way of causal inference</li><li>Learn how causal effects can differ from person to person</li><li>Use repeated observations of the same customers across time to adjust for biases</li><li>Understand how causal effects differ across geographic locations</li><li>Examine noncompliance bias and effect dilution</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492051374/",
            "title": "Introducing Python, 2nd Edition",
            "description": "<span><div><p>Easy to understand and fun to read, this updated edition of <i>Introducing Python</i> is ideal for beginning programmers as well as those new to the language. Author Bill Lubanovic takes you from the basics to more involved and varied topics, mixing tutorials with cookbook-style code recipes to explain concepts in Python 3. End-of-chapter exercises help you practice what you’ve learned.</p><p>You’ll gain a strong foundation in the language, including best practices for testing, debugging, code reuse, and other development tips. This book also shows you how to use Python for applications in business, science, and the arts, using various Python tools and open source packages.</p></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098121211/",
            "title": "Python Data Science Handbook, 2nd Edition",
            "description": "<span><div><p>Python is a first-class tool for many researchers, primarily because of its libraries for storing, manipulating, and gaining insight from data. Several resources exist for individual pieces of this data science stack, but only with the new edition of <i>Python Data Science Handbook</i> do you get them all—IPython, NumPy, pandas, Matplotlib, Scikit-Learn, and other related tools.</p><p>Working scientists and data crunchers familiar with reading and writing Python code will find the second edition of this comprehensive desk reference ideal for tackling day-to-day issues: manipulating, transforming, and cleaning data; visualizing different types of data; and using data to build statistical or machine learning models. Quite simply, this is the must-have reference for scientific computing in Python.</p><p>With this handbook, you'll learn how:</p><ul><li>IPython and Jupyter provide computational environments for scientists using Python</li><li>NumPy includes the ndarray for efficient storage and manipulation of dense data arrays</li><li>Pandas contains the DataFrame for efficient storage and manipulation of labeled/columnar data</li><li>Matplotlib includes capabilities for a flexible range of data visualizations</li><li>Scikit-learn helps you build efficient and clean Python implementations of the most important and established machine learning algorithms</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098139575/",
            "title": "Hypermodern Python Tooling",
            "description": "<span><div><p>Keeping up with the Python ecosystem can be daunting. Its developer tooling doesn't provide the out-of-the-box experience native to languages like Rust and Go. When it comes to long-term project maintenance or collaborating with others, every Python project faces the same problem: how to build reliable workflows beyond local development while staying in sync with the evolving ecosystem.</p><p>With this hands-on guide, Python developers will learn how to forge the moving parts of a Python project into an easy-to-use toolchain, using state-of-the-art tools including Poetry, Nox, GitHub Actions, Dependabot, pytest, mypy, pre-commit, Black, Ruff, and more. Author Claudio Jolowicz shows you how to create robust Python project structures complete with unit tests, static analysis, code formatting, type checking, and documentation as well as continuous integration and delivery.</p><p>You'll learn how to:</p><ul><li>Create open source projects with state-of-the-art infrastructure</li><li>Build a custom infrastructure for all Python projects in a company or team</li><li>Improve and modernize the infrastructure of an existing Python project</li><li>Evaluate modern Python tooling for adoption in existing projects</li><li>Use tools for packaging and dependency management</li><li>Automate common development tasks such as testing, dependency updates, and publishing releases</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492099611/",
            "title": "Football Analytics with Python & R",
            "description": "<span><div><p>Baseball is not the only sport to use \"moneyball.\" American football teams, fantasy football players, fans, and gamblers are increasingly using data to gain an edge on the competition. Professional and college teams use data to help identify team needs and select players to fill those needs. Fantasy football players and fans use data to try to defeat their friends, while sports bettors use data in an attempt to defeat the sportsbooks.</p><p>In this concise book, Eric Eager and Richard Erickson provide a clear introduction to using statistical models to analyze football data using both Python and R. Whether your goal is to qualify for an entry-level football analyst position, dominate your fantasy football league, or simply learn R and Python with fun example cases, this book is your starting place.</p><p>Through case studies in both Python and R, you'll learn to:</p><ul><li>Obtain NFL data from Python and R packages and web scraping</li><li>Visualize and explore data</li><li>Apply regression models to play-by-play data</li><li>Extend regression models to classification problems in football</li><li>Apply data science to sports betting with individual player props</li><li>Understand player athletic attributes using multivariate statistics</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098100650/",
            "title": "Robust Python",
            "description": "<span><div><p>Does it seem like your Python projects are getting bigger and bigger? Are you feeling the pain as your codebase expands and gets tougher to debug and maintain? Python is an easy language to learn and use, but that also means systems can quickly grow beyond comprehension. Thankfully, Python has features to help developers overcome maintainability woes.</p><p>In this practical book, author Patrick Viafore shows you how to use Python's type system to the max. You'll look at user-defined types, such as classes and enums, and Python's type hinting system. You'll also learn how to make Python extensible and how to use a comprehensive testing strategy as a safety net. With these tips and techniques, you'll write clearer and more maintainable code.</p><ul><li>Learn why types are essential in modern development ecosystems</li><li>Understand how type choices such as classes, dictionaries, and enums reflect specific intents</li><li>Make Python extensible for the future without adding bloat</li><li>Use popular Python tools to increase the safety and robustness of your codebase</li><li>Evaluate current code to detect common maintainability gotchas</li><li>Build a safety net around your codebase with linters and tests</li></ul></div></span>",
            "topic": "Python"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491952016/",
            "title": "JavaScript: The Definitive Guide, 7th Edition",
            "description": "<span><div><p>JavaScript is the programming language of the web and is used by more software developers today than any other programming language. For nearly 25 years this best seller has been the go-to guide for JavaScript programmers. The seventh edition is fully updated to cover the 2020 version of JavaScript, and new chapters cover classes, modules, iterators, generators, Promises, async/await, and metaprogramming. You’ll find illuminating and engaging example code throughout.</p><p>This book is for programmers who want to learn JavaScript and for web developers who want to take their understanding and mastery to the next level. It begins by explaining the JavaScript language itself, in detail, from the bottom up. It then builds on that foundation to cover the web platform and Node.js.</p><p>Topics include:</p><ul><li>Types, values, variables, expressions, operators, statements, objects, and arrays</li><li>Functions, classes, modules, iterators, generators, Promises, and async/await</li><li>JavaScript’s standard library: data structures, regular expressions, JSON, i18n, etc.</li><li>The web platform: documents, components, graphics, networking, storage, and threads</li><li>Node.js: buffers, files, streams, threads, child processes, web clients, and web servers</li><li>Tools and language extensions that professional JavaScript developers rely on</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098139865/",
            "title": "Learning JavaScript Design Patterns, 2nd Edition",
            "description": "<span><div><p>Do you want to write beautiful, structured, and maintainable JavaScript by applying modern design patterns to the language? Do you want clean, efficient, manageable code? Want to stay up-to-date with the latest best practices? If so, the updated second edition of <em>Learning JavaScript Design Patterns</em> is the ideal place to start.</p><p>Author Addy Osmani shows you how to apply modern design patterns to JavaScript and React—including modules, mixins, observers, and mediators. You'll learn about performance and rendering patterns such as server-side rendering and Islands architecture. You'll also learn how architectural patterns like MVC, MVP, and MVVM are useful from the perspective of a modern web application developer.</p><p>This book explores:</p><ul><li>Architectural patterns for structuring your components and apps</li><li>More than 20 design patterns in JavaScript and React, applicable for developers at any level</li><li>Different pattern categories including creational, structural, and behavioral</li><li>Essential performance patterns including dynamic imports and code-splitting</li><li>Rendering patterns such as server-side rendering, hydration, Islands architecture, and more</li></ul><br/><br/><p>Additionally, you'll explore modern JavaScript syntax like JavaScript modules, React patterns like Hooks, higher-order components (HOCs), and more, to stay ahead in the ever-evolving world of web development.</p></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098122249/",
            "title": "Full-Stack JavaScript Strategies",
            "description": "<span><div><p>As a working software developer, you know how to complete your tasks with solid code, whether it's on the frontend or backend. Now you're ready to move to the next level in your career, and you need to understand the subtle yet deep skills it takes to become a senior developer. This practical book shows you everything it takes to create a full-stack web application hosted on a cloud platform.</p><p>Senior staff engineer Milecia McGregor helps you see how the whole system works and how senior developers arrive at technical decisions. You'll learn about design and development principles and when to apply them. You'll also discover strategies for working with different teams and understand how the product team makes its decisions.</p><p>In four parts, this book shows you how to:</p><ul><li>Translate designs into tasks and learn the questions you'll need to ask the product team</li><li>Walk through development considerations for the backend like overall architecture, security, and third-party services</li><li>Build the project's user interface as well as state and data management, performance, and other concerns associated with frontend apps</li><li>Connect the frontend, backend, and other systems and deploy a full stack app to production</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098150686/",
            "title": "Web Browser API Cookbook",
            "description": "<span><div><p>JavaScript gives web developers great power to create rich interactive browser experiences, and much of that power is provided by the browser itself. Modern web APIs enable web-based applications to come to life like never before, supporting actions that once required browser plug-ins. Some are still in an experimental stage, but many are ready for use today.</p><p>With this hands-on cookbook, author Joe Attardi helps you explore the powerful APIs available in modern browsers and guides you through the specific tasks that they unlock. Because these features are web standards, there is comprehensive documentation available from trusted resources such as MDN Web Docs. The knowledge you'll gain is transferable across different companies and projects.</p><ul><li>Learn the breadth of functionality available in modern browser APIs</li><li>Explore future APIs that are still in an experimental stage</li><li>Discover newer elements, such as dialog that replaces the need for a third-party library</li><li>Build more powerful and interactive web applications using native APIs</li><li>Understand the permissions model used by the browser to unlock functionality such as geolocation and push notifications</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492055747/",
            "title": "JavaScript Cookbook, 3rd Edition",
            "description": "<span><div><p>Why reinvent the wheel every time you run into a problem with JavaScript? This cookbook is chock-full of code recipes for common programming tasks, along with techniques for building apps that work in any browser. You'll get adaptable code samples that you can add to almost any project--and you'll learn more about JavaScript in the process.</p><p>The recipes in this book take advantage of the latest features in ECMAScript 2020 and beyond and use modern JavaScript coding standards. You'll learn how to:</p><ul><li>Set up a productive development environment with a code editor, linter, and test server</li><li>Work with JavaScript data types, such as strings, arrays, and BigInts</li><li>Improve your understanding of JavaScript functions, including arrow functions, closures,  and generators</li><li>Apply object-oriented programming concepts like classes and inheritance</li><li>Work with rich media in JavaScript, including audio, video, and SVGs</li><li>Manipulate HTML markup and CSS styles</li><li>Use JavaScript anywhere with Node.js</li><li>Access and manipulate remote data with REST, GraphQL, and Fetch</li><li>Get started with the popular Express application-building framework</li><li>Perform asynchronous operations with Promises, async/await, and web workers</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098104429/",
            "title": "Multithreaded Javascript",
            "description": "<span><div><p>Traditionally, JavaScript has been a single-threaded language. Nearly all online forum posts, books, online documentation, and libraries refer to the language as single threaded. Thanks to recent advancements in the language--such as the Atomics and SharedArrayBuffers objects and Web Workers in the browser--JavaScript is now a multi-threaded language. These features will go down as being the biggest paradigm shift for the world's most popular programming language.</p><p><i>Multithreaded JavaScript</i> explores the various features that JavaScript runtimes have at their disposal for implementing multithreaded programming, providing both practical real-world examples, as well as reference material.</p><ul><li>Learn what multithreaded programming is and how you can benefit from it</li><li>Understand the differences between a web worker, a service worker, and a worker thread</li><li>Know when and when not to use threads in an application</li><li>Orchestrate communication between threads by leveraging the Atomics object</li><li>Build high-performance applications using the knowledge you gain from this book</li><li>Benchmark performance to learn if you'll benefit from multithreading</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492087502/",
            "title": "Gatsby: The Definitive Guide",
            "description": "<span><div><p>Get the definitive guide on Gatsby, the JavaScript framework for building blazing fast websites and applications. Used by Nike, Costa Coffee, and other companies worldwide, Gatsby is emerging as one of the key technologies in the Jamstack (JavaScript, APIs, and markup) ecosystem. With this comprehensive guide, you'll learn how to architect, build, and deploy Gatsby sites independently or with CMSs, commerce systems, and other data sources.</p><p>Author Preston So begins by showing you how to set up a Gatsby site from scratch. From there, you'll learn ways to use Gatsby's declarative rendering and GraphQL API, build complex offline-enabled sites, and continuously deploy Gatsby sites on a variety of platforms, including Gatsby Cloud.</p><ul><li>Discover how Gatsby integrates with many data sources and plug-ins</li><li>Set up, configure, and architect Gatsby sites using Gatsby's CLI, React, JSX, and GraphQL with high performance out of the box</li><li>Build an independent Gatsby site based on Markdown and data- and content-driven Gatsby sites that integrate with CMSs and commerce platforms</li><li>Deploy Gatsby sites with full CI/CD and test coverage on a variety of platforms, including Netlify, Vercel, and Gatsby Cloud</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492046974/",
            "title": "JavaScript Everywhere",
            "description": "<span><div><p>JavaScript is the little scripting language that could. Once used chiefly to add interactivity to web browser windows, JavaScript is now a primary building block of powerful and robust applications. In this practical book, new and experienced JavaScript developers will learn how to use this language to create APIs as well as web, mobile, and desktop applications.</p><p>Author and engineering leader Adam D. Scott covers technologies such as Node.js, GraphQL, React, React Native, and Electron. Ideal for developers who want to build full stack applications and ambitious web development beginners looking to bootstrap a startup, this book shows you how to create a single CRUD-style application that will work across several platforms.</p><ul><li>Explore GraphQL’s simple process for querying data</li><li>Learn about shared authentication for APIs, web apps, and native applications</li><li>Build performant web applications with React and Styled Components</li><li>Use React Native to write cross-platform applications for iOS and Android that compile to native code</li><li>Learn how to write desktop applications with Electron</li></ul></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491924471/",
            "title": "You Don't Know JS: Up & Going",
            "description": "<span><span><div><p>It’s easy to learn parts of JavaScript, but much harder to learn it completely—or even <i>sufficiently</i>—whether you’re new to the language or have used it for years. With the \"You Don’t Know JS\" book series, you’ll get a more complete understanding of JavaScript, including trickier parts of the language that many experienced JavaScript programmers simply avoid.</p><p>The series’ first book, <i>Up &amp; Going</i>, provides the necessary background for those of you with limited programming experience. By learning the basic building blocks of programming, as well as JavaScript’s core mechanisms, you’ll be prepared to dive into the other, more in-depth books in the series—and be well on your way toward true JavaScript.</p><p>With this book you will:</p><ul><li>Learn the essential programming building blocks, including operators, types, variables, conditionals, loops, and functions</li><li>Become familiar with JavaScript's core mechanisms such as values, function closures, <i>this</i>, and prototypes</li><li>Get an overview of other books in the series—and learn why it’s important to understand <i>all</i> parts of JavaScript</li></ul></div></span></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781449340124/",
            "title": "Head First JavaScript Programming",
            "description": "<span><div><p><b>What will you learn from this book?</b></p><p>This brain-friendly guide teaches you everything from JavaScript language fundamentals to advanced topics, including objects, functions, and the browser’s document object model. You won’t just be reading—you’ll be playing games, solving puzzles, pondering mysteries, and interacting with JavaScript in ways you never imagined. And you’ll write real code, lots of it, so you can start building your own web applications. Prepare to open your mind as you learn (and nail) key topics including:</p><ul><li>The inner details of JavaScript</li><li>How JavaScript works with the browser</li><li>The secrets of JavaScript types</li><li>Using arrays</li><li>The power of functions</li><li>How to work with objects</li><li>Making use of prototypes</li><li>Understanding closures</li><li>Writing and testing applications</li></ul><p><b>What’s so special about this book?</b></p><p>We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, <i>Head First JavaScript Programming</i> uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep. This book replaces Head First JavaScript, which is now out of print.</p></div></span>",
            "topic": "Javascript"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098125967/",
            "title": "Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 3rd Edition",
            "description": "<span><span><div><p>Through a recent series of breakthroughs, deep learning has boosted the entire field of machine learning. Now, even programmers who know close to nothing about this technology can use simple, efficient tools to implement programs capable of learning from data. This bestselling book uses concrete examples, minimal theory, and production-ready Python frameworks (Scikit-Learn, Keras, and TensorFlow) to help you gain an intuitive understanding of the concepts and tools for building intelligent systems.</p><p>With this updated third edition, author Aurélien Géron explores a range of techniques, starting with simple linear regression and progressing to deep neural networks. Numerous code examples and exercises throughout the book help you apply what you've learned. Programming experience is all you need to get started.</p><p></p><ul><li>Use Scikit-learn to track an example ML project end to end</li><li>Explore several models, including support vector machines, decision trees, random forests, and ensemble methods</li><li>Exploit unsupervised learning techniques such as dimensionality reduction, clustering, and anomaly detection</li><li>Dive into neural net architectures, including convolutional nets, recurrent nets, generative adversarial networks, autoencoders, diffusion models, and transformers</li><li>Use TensorFlow and Keras to build and train neural nets for computer vision, natural language processing, generative models, and deep reinforcement learning</li></ul></div></span></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098139285/",
            "title": "Learning Go, 2nd Edition",
            "description": "<span><div><p>Go has rapidly become the preferred language for building web services. Plenty of tutorials are available to teach Go's syntax to developers with experience in other programming languages, but tutorials aren't enough. They don't teach Go's idioms, so developers end up recreating patterns that don't make sense in a Go context. This practical guide provides the essential background you need to write clear and idiomatic Go.</p><p>No matter your level of experience, you'll learn how to think like a Go developer. Author Jon Bodner introduces the design patterns experienced Go developers have adopted and explores the rationale for using them. This updated edition also shows you how Go's generics support fits into the language.</p><p>This book helps you:</p><ul><li>Write idiomatic code in Go and design a Go project</li><li>Understand the reasons behind Go's design decisions</li><li>Set up a Go development environment for a solo developer or team</li><li>Learn how and when to use reflection, unsafe, and cgo</li><li>Discover how Go's features allow the language to run efficiently</li><li>Know which Go features you should use sparingly or not at all</li><li>Use Go's tools to improve performance, optimize memory usage, and reduce garbage collection</li><li>Learn how to use Go's advanced development tools</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492056348/",
            "title": "Fluent Python, 2nd Edition",
            "description": "<span><div><p>Don't waste time bending Python to fit patterns you've learned in other languages. Python's simplicity lets you become productive quickly, but often this means you aren't using everything the language has to offer. With the updated edition of this hands-on guide, you'll learn how to write effective, modern Python 3 code by leveraging its best ideas.</p><p>Discover and apply idiomatic Python 3 features beyond your past experience. Author Luciano Ramalho guides you through Python's core language features and libraries and teaches you how to make your code shorter, faster, and more readable.</p><p>Complete with major updates throughout, this new edition features five parts that work as five short books within the book:</p><ul><li><b>Data structures:</b> Sequences, dicts, sets, Unicode, and data classes</li><li><b>Functions as objects:</b> First-class functions, related design patterns, and type hints in function declarations</li><li><b>Object-oriented idioms:</b> Composition, inheritance, mixins, interfaces, operator overloading, protocols, and more static types</li><li><b>Control flow:</b> Context managers, generators, coroutines, async/await, and thread/process pools</li><li><b>Metaprogramming:</b> Properties, attribute descriptors, class decorators, and new class metaprogramming hooks that replace or simplify metaclasses</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098108298/",
            "title": "Fundamentals of Data Engineering",
            "description": "<span><div><p>Data engineering has grown rapidly in the past decade, leaving many software engineers, data scientists, and analysts looking for a comprehensive view of this practice. With this practical book, you'll learn how to plan and build systems to serve the needs of your organization and customers by evaluating the best technologies available through the framework of the data engineering lifecycle.</p><p>Authors Joe Reis and Matt Housley walk you through the data engineering lifecycle and show you how to stitch together a variety of cloud technologies to serve the needs of downstream data consumers. You'll understand how to apply the concepts of data generation, ingestion, orchestration, transformation, storage, and governance that are critical in any data environment regardless of the underlying technology.</p><p>This book will help you:</p><ul><li>Get a concise overview of the entire data engineering landscape</li><li>Assess data engineering problems using an end-to-end framework of best practices</li><li>Cut through marketing hype when choosing data technologies, architecture, and processes</li><li>Use the data engineering lifecycle to design and build a robust architecture</li><li>Incorporate data governance and security across the data engineering lifecycle</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491903063/",
            "title": "Designing Data-Intensive Applications",
            "description": "<span><div><p>Data is at the center of many challenges in system design today. Difficult issues need to be figured out, such as scalability, consistency, reliability, efficiency, and maintainability. In addition, we have an overwhelming variety of tools, including relational databases, NoSQL datastores, stream or batch processors, and message brokers. What are the right choices for your application? How do you make sense of all these buzzwords?</p><p>In this practical and comprehensive guide, author Martin Kleppmann helps you navigate this diverse landscape by examining the pros and cons of various technologies for processing and storing data. Software keeps changing, but the fundamental principles remain the same. With this book, software engineers and architects will learn how to apply those ideas in practice, and how to make full use of data in modern applications.</p><ul><li>Peer under the hood of the systems you already use, and learn how to use and operate them more effectively</li><li>Make informed decisions by identifying the strengths and weaknesses of different tools</li><li>Navigate the trade-offs around consistency, scalability, fault tolerance, and complexity</li><li>Understand the distributed systems research upon which modern databases are built</li><li>Peek behind the scenes of major online services, and learn from their architectures</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098152475/",
            "title": "Developing Apps with GPT-4 and ChatGPT",
            "description": "<span><div><p>This minibook is a comprehensive guide for Python developers who want to learn how to build applications with large language models. Authors Olivier Caelen and Marie-Alice Blete cover the main features and benefits of GPT-4 and ChatGPT and explain how they work. You'll also get a step-by-step guide for developing applications using the GPT-4 and ChatGPT Python library, including text generation, Q&amp;A, and content summarization tools.</p><p>Written in clear and concise language, <em>Developing Apps with GPT-4 and ChatGPT</em> includes easy-to-follow examples to help you understand and apply the concepts to your projects. Python code examples are available in a GitHub repository, and the book includes a glossary of key terms. Ready to harness the power of large language models in your applications? This book is a must.</p><p>You'll learn:</p><ul><li>The fundamentals and benefits of ChatGPT and GPT-4 and how they work</li><li>How to integrate these models into Python-based applications for NLP tasks</li><li>How to develop applications using GPT-4 or ChatGPT APIs in Python for text generation, question answering, and content summarization, among other tasks</li><li>Advanced GPT topics including prompt engineering, fine-tuning models for specific tasks, plug-ins, LangChain, and more</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098134174/",
            "title": "Generative Deep Learning, 2nd Edition",
            "description": "<span><div><p>Generative AI is the hottest topic in tech. This practical book teaches machine learning engineers and data scientists how to use TensorFlow and Keras to create impressive generative deep learning models from scratch, including variational autoencoders (VAEs), generative adversarial networks (GANs), Transformers, normalizing flows, energy-based models, and denoising diffusion models.</p><p>The book starts with the basics of deep learning and progresses to cutting-edge architectures. Through tips and tricks, you'll understand how to make your models learn more efficiently and become more creative.</p><ul><li>Discover how VAEs can change facial expressions in photos</li><li>Train GANs to generate images based on your own dataset</li><li>Build diffusion models to produce new varieties of flowers</li><li>Train your own GPT for text generation</li><li>Learn how large language models like ChatGPT are trained</li><li>Explore state-of-the-art architectures such as StyleGAN2 and ViT-VQGAN</li><li>Compose polyphonic music using Transformers and MuseGAN</li><li>Understand how generative world models can solve reinforcement learning tasks</li><li>Dive into multimodal models such as DALL.E 2, Imagen, and Stable Diffusion</li></ul><p>This book also explores the future of generative AI and how individuals and companies can proactively begin to leverage this remarkable new technology to create competitive advantage.</p></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098151232/",
            "title": "Tidy First?",
            "description": "<span><div><p>Messy code is a nuisance. \"Tidying\" code, to make it more readable, requires breaking it up into manageable sections. In this practical guide, author Kent Beck, creator of Extreme Programming and pioneer of software patterns, suggests when and where you might apply tidyings to improve your code while keeping the overall structure of the system in mind.</p><p>Instead of trying to master tidying all at once, this book lets you try out a few examples that make sense for your problem. If you have a big function containing many lines of code, you'll learn how to logically divide it into smaller chunks. Along the way, you'll learn the theory behind software design: coupling, cohesion, discounted cash flows, and optionality.</p><p>This book helps you:</p><ul><li>Understand the basic theory of how software design works and the forces that act on it</li><li>Explore the difference between changes to a system's behavior and changes to its structure</li><li>Improve your programming experience by sometimes tidying first and sometimes tidying after</li><li>Learn how to make large changes in small, safe steps</li><li>Approach software design as an exercise in human relationships</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098150952/",
            "title": "Hands-On Large Language Models",
            "description": "<span><div><p>AI has acquired startling new language capabilities in just the past few years. Driven by the rapid advances in deep learning, language AI systems are able to write and understand text better than ever before. This trend enables the rise of new features, products, and entire industries. With this book, Python developers will learn the practical tools and concepts they need to use these capabilities today.</p><p>You'll learn how to use the power of pre-trained large language models for use cases like copywriting and summarization; create semantic search systems that go beyond keyword matching; build systems that classify and cluster text to enable scalable understanding of large amounts of text documents; and use existing libraries and pre-trained models for text classification, search, and clusterings.</p><p>This book also shows you how to:</p><ul><li>Build advanced LLM pipelines to cluster text documents and explore the topics they belong to</li><li>Build semantic search engines that go beyond keyword search with methods like dense retrieval and rerankers</li><li>Learn various use cases where these models can provide value</li><li>Understand the architecture of underlying Transformer models like BERT and GPT</li><li>Get a deeper understanding of how LLMs are trained</li><li>Understanding how different methods of fine-tuning optimize LLMs for specific applications (generative model fine-tuning, contrastive fine-tuning, in-context learning, etc.)</li><li>Optimize LLMs for specific applications with methods such as generative model fine-tuning, contrastive fine-tuning, and in-context learning</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098118723/",
            "title": "The Staff Engineer's Path",
            "description": "<span><div><p>For years, companies have rewarded their most effective engineers with management positions. But treating management as the default path for an engineer with leadership ability doesn't serve the industry well--or the engineer. The staff engineer's path allows engineers to contribute at a high level as role models, driving big projects, determining technical strategy, and raising everyone's skills.</p><p>This in-depth book shows you how to understand your role, manage your time, master strategic thinking, and set the standard for technical work. You'll read about how to be a leader without direct authority, how to plan ahead to make the right technical decisions, and how to make everyone around you better, while still growing as an expert in your domain.</p><p>By exploring the three pillars of a staff engineer's job, Tanya Reilly, a veteran of the staff engineer track, shows you how to:</p><ul><li>Take a broad, strategic view when thinking about your work</li><li>Dive into practical tactics for making projects succeed</li><li>Determine what \"good engineering\" means in your organization</li></ul></div></span>",
            "topic": "Machine_Learning"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492097273/",
            "title": "Fluent C",
            "description": "<span><div><p>Expert advice on C programming is hard to find. While much help is available for object-oriented programming languages, there's surprisingly little for the C language. With this hands-on guide, beginners and experienced C programmers alike will find guidance about design decisions, including how to apply them bit by bit to running code examples when building large-scale programs.</p><p>Christopher Preschern, a leading member of the design patterns community, answers questions such as how to structure C programs, cope with error handling, or design flexible interfaces. Whether you're looking for one particular pattern or an overview of design options for a specific topic, this book shows you how to implement hands-on design knowledge specifically for the C programming language.</p><p>You'll find design patterns for:</p><ul><li>Error handling</li><li>Returning error information</li><li>Memory management</li><li>Returning data from C functions</li><li>Data lifetime and ownership</li><li>Flexible APIs</li><li>Flexible iterator interfaces</li><li>Organizing files in modular programs</li><li>Escaping #ifdef Hell</li></ul></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098100322/",
            "title": "Smaller C",
            "description": "<span><div><p>For makers looking to use the smallest microcontrollers or to wring the highest performance out of larger ones, the C language is still the best option. This practical book provides a solid grounding in C basics for anyone who tinkers with programming microcontrollers. You'll explore the many ways C enables developers and makers to get big results out of tiny devices.</p><p>Author Marc Loy shows you how to write clean, maintainable C code from scratch. This language and its cousin, C++, are still widely used to write low-level code for device drivers or operating systems. By understanding C syntax and its quirks, you'll gain an enduring computer language literacy that will help you pick up new languages and styles more easily.</p><ul><li>Learn C fundamentals, such as data types, flow control, and functions</li><li>Explore memory management including how programs work on small devices</li><li>Understand answers provided in online forums such as Reddit or Stack Overflow</li><li>Write efficient, custom C code that's both readable and maintainable</li><li>Analyze the performance of your code and weigh optimizations</li><li>Evaluate third-party libraries for use in your own projects</li><li>Create your own libraries to share with others</li></ul></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491924174/",
            "title": "C in a Nutshell, 2nd Edition",
            "description": "<span><p/><div><p>The new edition of this classic O’Reilly reference provides clear, detailed explanations of every feature in the C language and runtime library, including multithreading, type-generic macros, and library functions that are new in the 2011 C standard (C11). If you want to understand the effects of an unfamiliar function, and how the standard library requires it to behave, you’ll find it here, along with a typical example.</p><p>Ideal for experienced C and C++ programmers, this book also includes popular tools in the GNU software collection. You’ll learn how to build C programs with GNU Make, compile executable programs from C source code, and test and debug your programs with the GNU debugger.</p><p>In three sections, this authoritative book covers:</p><ul><li><b>C language concepts and language elements</b>, with separate chapters on types, statements, pointers, memory management, I/O, and more</li><li><b>The C standard library</b>, including an overview of standard headers and a detailed function reference</li><li><b>Basic C programming tools</b> in the GNU software collection, with instructions on how use them with the Eclipse IDE</li></ul></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781449344535/",
            "title": "Understanding and Using C Pointers",
            "description": "<span><span><div><p>Improve your programming through a solid understanding of C pointers and memory management. With this practical book, you’ll learn how pointers provide the mechanism to dynamically manipulate memory, enhance support for data structures, and enable access to hardware. Author Richard Reese shows you how to use pointers with arrays, strings, structures, and functions, using memory models throughout the book.</p><p>Difficult to master, pointers provide C with much flexibility and power—yet few resources are dedicated to this data type. This comprehensive book has the information you need, whether you’re a beginner or an experienced C or C++ programmer or developer.</p><ul><li>Get an introduction to pointers, including the declaration of different pointer types</li><li>Learn about dynamic memory allocation, de-allocation, and alternative memory management techniques</li><li>Use techniques for passing or returning data to and from functions</li><li>Understand the fundamental aspects of arrays as they relate to pointers</li><li>Explore the basics of strings and how pointers are used to support them</li><li>Examine why pointers can be the source of security problems, such as buffer overflow</li><li>Learn several pointer techniques, such as the use of opaque pointers, bounded pointers and, the restrict keyword</li></ul></div></span></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491904428/",
            "title": "21st Century C, 2nd Edition",
            "description": "<span><span><span><p>Throw out your old ideas of C, and relearn a programming language that’s substantially outgrown its origins. With this revised edition of <i>21st Century C</i>, you’ll discover up-to-date techniques missing from other C tutorials, whether you’re new to the language or just getting reacquainted. Get past idioms that made sense on mainframes and learn the tools you need to work with this evolved and aggressively simple language. No matter what programming language you currently favor, you’ll quickly see that 21st century C <i>rocks</i>.</p></span></span></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781449335649/",
            "title": "Head First C",
            "description": "<span><div><p>Ever wished you could learn C from a book? <i>Head First C</i> provides a complete learning experience for C and structured imperative programming. With a unique method that goes beyond syntax and how-to manuals, this guide not only teaches you the language, it helps you understand how to be a great programmer. You'll learn key areas such as language basics, pointers and pointer arithmetic, and dynamic memory management. Advanced topics include multi-threading and network programming—topics typically covered on a college-level course.</p><p>This book also features labs: in-depth projects intended to stretch your abilities, test your new skills, and build confidence. Head First C mimics the style of college-level C courses, making it ideal as an accessible textbook for students.</p><p>We think your time is too valuable to waste struggling with new concepts. Using the latest research in cognitive science and learning theory to craft a multi-sensory learning experience, Head First C uses a visually rich format designed for the way your brain works, not a text-heavy approach that puts you to sleep.</p></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781449344382/",
            "title": "21st Century C",
            "description": "<span><div><p>Throw out your old ideas of C, and relearn a programming language that’s substantially outgrown its origins. With <i>21st Century C</i>, you’ll discover up-to-date techniques that are absent from every other C text available. C isn’t just the foundation of modern programming languages, it is a modern language, ideal for writing efficient, state-of-the-art applications. Learn to dump old habits that made sense on mainframes, and pick up the tools you need to use this evolved and aggressively simple language. No matter what programming language you currently champion, you’ll agree that C <i>rocks</i>.</p><ul><li>Set up a C programming environment with shell facilities, makefiles, text editors, debuggers, and memory checkers</li><li>Use Autotools, C’s de facto cross-platform package manager</li><li>Learn which older C concepts should be downplayed or deprecated</li><li>Explore problematic C concepts that are too useful to throw out</li><li>Solve C’s string-building problems with C-standard and POSIX-standard functions</li><li>Use modern syntactic features for functions that take structured inputs</li><li>Build high-level object-based libraries and programs</li><li>Apply existing C libraries for doing advanced math, talking to Internet servers, and running databases</li></ul></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/0596006977/",
            "title": "C in a Nutshell",
            "description": "<span><span><div><p>Learning a language--any language--involves a process wherein you learn to rely less and less on instruction and more increasingly on the aspects of the language you've mastered. Whether you're learning French, Java, or C, at some point you'll set aside the tutorial and attempt to converse on your own. It's not necessary to know every subtle facet of French in order to speak it well, especially if there's a good dictionary available. Likewise, C programmers don't need to memorize every detail of C in order to write good programs. What they need instead is a reliable, comprehensive reference that they can keep nearby. <i>C in a Nutshell</i> is that reference.</p><p>This long-awaited book is a complete reference to the C programming language and C runtime library. Its purpose is to serve as a convenient, reliable companion in your day-to-day work as a C programmer.  C in a Nutshell covers virtually everything you need to program in C, describing all the elements of the language and illustrating their use with numerous examples.</p><p>The book is divided into three distinct parts.  The first part is a fast-paced description, reminiscent of the classic Kernighan &amp; Ritchie text on which many C programmers cut their teeth.  It focuses specifically on the C language and preprocessor directives, including extensions introduced to the ANSI standard in 1999.  These topics and others are covered: </p><p/><ul><li>Numeric constants</li><li>Implicit and explicit type conversions</li><li>Expressions and operators</li><li>Functions</li><li>Fixed-length and variable-length arrays</li><li>Pointers</li><li>Dynamic memory management</li><li>Input and output</li></ul><p>The second part of the book is a comprehensive reference to the C runtime library; it includes an overview of the contents of the standard headers and a description of each standard library function.  Part III provides the necessary knowledge of the C programmer's basic tools: the compiler, the make utility, and the debugger.  The tools described here are those in the GNU software collection.</p><p><i>C in a Nutshell</i> is the perfect companion to K&amp;R, and destined to be the most reached-for reference on your desk.</p></div></span></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/0596004362/",
            "title": "C Pocket Reference",
            "description": "<span><span><span><p/><div><p>C is one of the oldest programming languages and still one of the most widely used. Whether you're an experienced C programmer or you're new to the language, you know how frustrating it can be to hunt through hundreds of pages in your reference books to find that bit of information on a certain function, type or other syntax element. Or even worse, you may not have your books with you. Your answer is the <i>C Pocket Reference</i>. Concise and easy to use, this handy pocket guide to C is a must-have quick reference for any C programmer. It's the only C reference that fits in your pocket and is an excellent companion to O'Reilly's other C books.Ideal as an introduction for beginners and a quick reference for advanced programmers, the <i>C Pocket Reference</i> consists of two parts: a compact description of the C language and a thematically structured reference to the standard library. The representation of the language is based on the ANSI standard and includes extensions introduced in 1999. An index is included to help you quickly find the information you need.This small book covers the following:</p><ul><li>C language fundamentals</li><li>Data types</li><li>Expressions and operators</li><li>C statements</li><li>Declarations</li><li>Functions</li><li>Preprocessor directives</li><li>The standard library</li></ul>O'Reilly's Pocket References have become a favorite among programmers everywhere. By providing a wealth of important details in a concise, well-organized format, these handy books deliver just what you need to complete the task at hand. When you've reached a sticking point in your work and need to get to a solution quickly, the new <i>C Pocket Reference</i> is the book you'll want to have.</div></span></span></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/1565924533/",
            "title": "Mastering Algorithms with C",
            "description": "<span><p/><div><p>There are many books on data structures and algorithms, including some with useful libraries of C functions. <i>Mastering Algorithms with C</i> offers you a unique combination of theoretical background and working code. With robust solutions for everyday programming tasks, this book avoids the abstract style of most classic data structures and algorithms texts, but still provides all of the information you need to understand the purpose and use of common programming techniques.</p><p>Implementations, as well as interesting, real-world examples of each data structure and algorithm, are included.</p><p>Using both a programming style and a writing style that are exceptionally clean, Kyle Loudon shows you how to use such essential data structures as lists, stacks, queues, sets, trees, heaps, priority queues, and graphs. He explains how to use algorithms for sorting, searching, numerical analysis, data compression, data encryption, common graph problems, and computational geometry. And he describes the relative efficiency of all implementations. The compression and encryption chapters not only give you working code for reasonably efficient solutions, they offer explanations of concepts in an approachable manner for people who never have had the time or expertise to study them in depth.</p><p>Anyone with a basic understanding of the C language can use this book. In order to provide maintainable and extendible code, an extra level of abstraction (such as pointers to functions) is used in examples where appropriate. Understanding that these techniques may be unfamiliar to some programmers, Loudon explains them clearly in the introductory chapters.</p><p>Contents include:</p><ul><li>Pointers</li><li>Recursion</li><li>Analysis of algorithms</li><li>Data structures (lists, stacks, queues, sets, hash tables, trees, heaps, priority queues, graphs)</li><li>Sorting and searching</li><li>Numerical methods</li><li>Data compression</li><li>Data encryption</li><li>Graph algorithms</li><li>Geometric algorithms</li></ul></div></span>",
            "topic": "C++"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098139285/",
            "title": "Learning Go, 2nd Edition",
            "description": "<span><div><p>Go has rapidly become the preferred language for building web services. Plenty of tutorials are available to teach Go's syntax to developers with experience in other programming languages, but tutorials aren't enough. They don't teach Go's idioms, so developers end up recreating patterns that don't make sense in a Go context. This practical guide provides the essential background you need to write clear and idiomatic Go.</p><p>No matter your level of experience, you'll learn how to think like a Go developer. Author Jon Bodner introduces the design patterns experienced Go developers have adopted and explores the rationale for using them. This updated edition also shows you how Go's generics support fits into the language.</p><p>This book helps you:</p><ul><li>Write idiomatic code in Go and design a Go project</li><li>Understand the reasons behind Go's design decisions</li><li>Set up a Go development environment for a solo developer or team</li><li>Learn how and when to use reflection, unsafe, and cgo</li><li>Discover how Go's features allow the language to run efficiently</li><li>Know which Go features you should use sparingly or not at all</li><li>Use Go's tools to improve performance, optimize memory usage, and reduce garbage collection</li><li>Learn how to use Go's advanced development tools</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492077206/",
            "title": "Learning Go",
            "description": "<span><div><p>Go is rapidly becoming the preferred language for building web services. While there are plenty of tutorials available that teach Go's syntax to developers with experience in other programming languages, tutorials aren't enough. They don't teach Go's idioms, so developers end up recreating patterns that don't make sense in a Go context. This practical guide provides the essential background you need to write clear and idiomatic Go.</p><p>No matter your level of experience, you'll learn how to think like a Go developer. Author Jon Bodner introduces the design patterns experienced Go developers have adopted and explores the rationale for using them. You'll also get a preview of Go's upcoming generics support and how it fits into the language.</p><ul><li>Learn how to write idiomatic code in Go and design a Go project</li><li>Understand the reasons for the design decisions in Go</li><li>Set up a Go development environment for a solo developer or team</li><li>Learn how and when to use reflection, unsafe, and cgo</li><li>Discover how Go's features allow the language to run efficiently</li><li>Know which Go features you should use sparingly or not at all</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098122102/",
            "title": "Go Cookbook",
            "description": "<span><div><p>Go is an increasingly popular language for programming everything from web applications to distributed network services. This practical guide provides recipes to help you unravel common problems and perform useful tasks when working with Go. Each recipe includes self-contained code solutions that you can freely use, along with a discussion of how and why they work. Programmers new to Go can quickly ramp up their knowledge while accomplishing useful tasks, and experienced Go developers can save time by cutting and pasting proven code directly into their applications.</p><p>Recipes include:</p><ul><li>Creating a module</li><li>Calling code from another module</li><li>Returning and handling an error</li><li>Converting strings to numbers (or converting numbers to strings)</li><li>Modifying multiple characters in a string</li><li>Creating substrings from a string</li><li>Capturing string input</li><li>And so much more</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781098105709/",
            "title": "Efficient Go",
            "description": "<span><div><p>With technological advancements, fast markets, and higher complexity of systems, software engineers tend to skip the uncomfortable topic of software efficiency. However, tactical, observability-driven performance optimizations are vital for every product to save money and ensure business success.</p><p>With this book, any engineer can learn how to approach software efficiency effectively, professionally, and without stress. Author Bartłomiej Płotka provides the tools and knowledge required to make your systems faster and less resource-hungry. <i>Efficient Go</i> guides you in achieving better day-to-day efficiency using Go. In addition, most content is language-agnostic, allowing you to bring small but effective habits to your programming or product management cycles.</p><p>This book shows you how to:</p><ul><li>   Clarify and negotiate efficiency goals</li><li>Optimize efficiency on various levels</li><li>Use common resources like CPU and memory effectively</li><li>Assess efficiency using observability signals like metrics, logging, tracing, and (continuous) profiling via open source projects like Prometheus, Jaeger, and Parca</li><li>Apply tools like <code>go test</code>, <code>pprof</code>, <code>benchstat</code>, and <code>k6</code> to create reliable micro and macro benchmarks</li><li>Efficiently use Go and its features like slices, generics, goroutines, allocation semantics, garbage collection, and more!</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492076322/",
            "title": "Cloud Native Go",
            "description": "<span><div><p>What do Docker, Kubernetes, and Prometheus have in common? All of these cloud native technologies are written in the Go programming language. This practical book shows you how to use Go's strengths to develop cloud native services that are scalable and resilient, even in an unpredictable environment. You'll explore the composition and construction of these applications, from lower-level features of Go to mid-level design patterns to high-level architectural considerations.</p><p>Each chapter builds on the lessons of the last, walking intermediate to advanced developers through Go to construct a simple but fully featured distributed key-value store. You'll learn best practices for adopting Go as your development language for solving cloud native management and deployment issues.</p><ul><li>Learn how cloud native applications differ from other software architectures</li><li>Understand how Go can solve the challenges of designing scalable distributed services</li><li>Leverage Go's lower-level features, such as channels and goroutines, to implement a reliable cloud native service</li><li>Explore what \"service reliability\" is and what it has to do with cloud native</li><li>Apply a variety of patterns, abstractions, and tooling to build and manage complex distributed systems</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491941294/",
            "title": "Concurrency in Go",
            "description": "<span><div><p>Concurrency can be notoriously difficult to get right, but fortunately, the Go open source programming language makes working with concurrency tractable and even easy. If you’re a developer familiar with Go, this practical book demonstrates best practices and patterns to help you incorporate concurrency into your systems.</p><p>Author Katherine Cox-Buday takes you step-by-step through the process. You’ll understand how Go chooses to model concurrency, what issues arise from this model, and how you can compose primitives within this model to solve problems. Learn the skills and tooling you need to confidently write and implement concurrent systems of any size.</p><ul><li>Understand how Go addresses fundamental problems that make concurrency difficult to do correctly</li><li>Learn the key differences between concurrency and parallelism</li><li>Dig into the syntax of Go’s memory synchronization primitives</li><li>Form patterns with these primitives to write maintainable concurrent code</li><li>Compose patterns into a series of practices that enable you to write large, distributed systems that scale</li><li>Learn the sophistication behind goroutines and how Go’s runtime stitches everything together</li></ul></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491969540/",
            "title": "Head First Go",
            "description": "<span><div><p><b>What will you learn from this book?</b></p><p>Go makes it easy to build software that’s simple, reliable, and efficient. Andthis book makes it easy for programmers like you to get started. Googledesigned Go for high-performance networking and multiprocessing, but—like Python and JavaScript—the language is easy to read and use. With thispractical hands-on guide, you’ll learn how to write Go code using clearexamples that demonstrate the language in action. Best of all, you’ll understandthe conventions and techniques that employers want entry-level Godevelopers to know.</p><p><b>Why does this book look so different?</b></p><p>Based on the latest research in cognitive science and learning theory, HeadFirst Go uses a visually rich format to engage your mind rather than a textheavyapproach that puts you to sleep. Why waste your time struggling withnew concepts? This multisensory learning experience is designed for theway your brain really works.</p></div></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491941997/",
            "title": "Introducing Go",
            "description": "<span><span><span><span><span><p>Perfect for beginners familiar with programming basics, this hands-on guide provides an easy introduction to Go, the general-purpose programming language from Google. Author Caleb Doxsey covers the language’s core features with step-by-step instructions and exercises in each chapter to help you practice what you learn. By the time you finish this book, not only will you be able to write real Go programs, you'll be ready to tackle advanced techniques.</p></span></span></span></span></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492033172/",
            "title": "Python vs. Go",
            "description": "<span><p>Comparing Python with Go is a bit like comparing an SUV with a sports car: they were created to serve different needs. Thanks to their simple syntax and careful design, you will probably find Python and Go easier to learn and use than other mainstream languages that you might have already studied. Given their gentle learning curve and phenomenal growth in several fields, getting to know them is a sound investment now.</p></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491982297/",
            "title": "Setting up your Go development docker environment",
            "description": "<span><p>Are you a Go programmer looking to introduce Docker containers into your workflow? In this lesson, you’ll learn how to set up a containerized development environment that rebuilds Go code automatically as you edit it. You’ll learn how to use tools such as Realize, and how to generate a small and efficient container image for production distribution using Docker Multistage Builds.</p></span>",
            "topic": "Go"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492051718/",
            "title": "Learning React, 2nd Edition",
            "description": "<span><div><p>If you want to learn how to build efficient React applications, this is your book. Ideal for web developers and software engineers who understand how JavaScript, CSS, and HTML work in the browser, this updated edition provides best practices and patterns for writing modern React code. No prior knowledge of React or functional JavaScript is necessary.</p><p>With their learning road map, authors Alex Banks and Eve Porcello show you how to create UIs that can deftly display changes without page reloads on large-scale, data-driven websites. You’ll also discover how to work with functional programming and the latest ECMAScript features. Once you learn how to build React components with this hands-on guide, you’ll understand just how useful React can be in your organization.</p><ul>Understand key functional programming concepts with JavaScriptLook under the hood to learn how React runs in the browserCreate application presentation layers with React componentsManage data and reduce the time you spend debugging applicationsIncorporate React Hooks to manage state and fetch dataUse a routing solution for single-page application featuresLearn how to structure React applications with servers in mind</ul></div></span>",
            "topic": "React"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492085836/",
            "title": "React Cookbook",
            "description": "<span><div><p>React helps you create and work on an app in just a few minutes. But learning how to put all the pieces together is hard. How do you validate a form? Or implement a complex multistep user action without writing messy code? How do you test your code? Make it reusable? Wire it to a backend? Keep it easy to understand? The <i>React Cookbook</i> delivers answers fast.</p><p>Many books teach you how to get started, understand the framework, or use a component library with React, but very few provide examples to help you solve particular problems. This easy-to-use cookbook includes the example code developers need to unravel the most common problems when using React, categorized by topic area and problem.</p><p>You'll learn how to:</p><ul><li>Build a single-page application in React using a rich UI</li><li>Create progressive web applications that users can install and work with offline</li><li>Integrate with backend services such as REST and GraphQL</li><li>Automatically test for accessibility problems in your application</li><li>Secure applications with fingerprints and security tokens using WebAuthn</li><li>Deal with bugs and avoid common functional and performance problems</li></ul></div></span>",
            "topic": "React"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781492051459/",
            "title": "React: Up & Running, 2nd Edition",
            "description": "<span><div><p>Hit the ground running with React, the open source technology from Facebook for building rich web applications fast. Updated for the latest React release, the second edition of this hands-on guide shows you how to build React components and organize them into maintainable large-scale apps. If you're familiar with JavaScript syntax, you're ready to get started.</p><p>Through the course of this book, author Stoyan Stefanov helps web developers and programmers build a complete single-page application. You'll quickly learn why some developers consider React the key to the web app development puzzle.</p><ul><li>Set up React and write your first \"Hello, World\" web app</li><li>Create and use custom React components alongside generic DOM components</li><li>Build a data table component that lets you edit, sort, search, and export its contents</li><li>Master the JSX syntax</li><li>Use built-in Hooks and create your own custom ones</li><li>Manage the app's data flow with reducers and contexts</li><li>Use Create React App to take care of the build process and focus on React itself</li><li>Build a complete custom app that lets you store data on the client</li></ul></div></span>",
            "topic": "React"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491954614/",
            "title": "Learning React",
            "description": "<span><div><p>If you want to learn how to build efficient user interfaces with React, this is your book. Authors Alex Banks and Eve Porcello show you how to create UIs with this small JavaScript library that can deftly display data changes on large-scale, data-driven websites without page reloads. Along the way, you’ll learn how to work with functional programming and the latest ECMAScript features.</p><p>Developed by Facebook, and used by companies including Netflix, Walmart, and <i>The New York Times</i> for large parts of their web interfaces, React is quickly growing in use. By learning how to build React components with this hands-on guide, you’ll fully understand how useful React can be in your organization.</p><ul><li>Learn key functional programming concepts with JavaScript</li><li>Peek under the hood to understand how React runs in the browser</li><li>Create application presentation layers by mounting and composing React components</li><li>Use component trees to manage data and reduce the time you spend debugging applications</li><li>Explore React’s component lifecycle and use it to load data and improve UI performance</li><li>Use a routing solution for browser history, bookmarks, and other features of single-page applications</li><li>Learn how to structure React applications with servers in mind</li></ul></div></span>",
            "topic": "React"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491996744/",
            "title": "What React Is and Why It Matters",
            "description": "<span><div><p>React quickly has become one of the most influential tools for web development and a compelling choice for many projects. The decision to use a new library such as React is critical to the way that teams function, so it’s essential to get buy-in from everybody at the table, including team members who are not developers.</p><p>Many excellent resources will teach you how to use React, but few get into just why this library matters. In this ebook, author Eric Baer examines React’s core innovations with as little jargon as possible to help promote a diverse set of views in your conversations about technology.</p><p>Any member of a technical team, from software engineers to program and product managers to technical management, can use this ebook to understand how the features and constraints of React and other development tools affect the way companies build modern web applications.</p><p>You’ll explore:</p><ul><li>How React’s core components work</li><li>How React uses tricks from game development to deliver runtime performance by default</li><li>Why React’s academic leanings have pushed the web development community to adopt cutting-edge techniques from computer science</li><li>The challenges with using React on large projects</li><li>Why React Native is pushing the limits of code reuse across web and native development boundaries</li></ul></div></span>",
            "topic": "React"
        },
        {
            "cover_url": "https://learning.oreilly.com/library/cover/9781491931813/",
            "title": "React: Up & Running",
            "description": "<span><div><p>Hit the ground running with React, the open-source technology from Facebook for building rich web applications fast. With this practical guide, Yahoo! web developer Stoyan Stefanov teaches you how to build components—React’s basic building blocks—and organize them into maintainable, large-scale apps. If you’re familiar with basic JavaScript syntax, you’re ready to get started.</p><p>Once you understand how React works, you’ll build a complete custom Whinepad app that helps users rate wines and keep notes. You’ll quickly learn why some developers consider React the key to the web app development puzzle.</p><ul><li>Set up React and write your first \"Hello world\" web app</li><li>Create and use custom React components alongside generic DOM components</li><li>Build a data table component that lets you edit, sort, search, and export its contents</li><li>Use the JSX syntax extension as an alternative to function calls</li><li>Set up a lean, low-level build process that helps you focus on React</li><li>Build a complete custom app that lets you store data on the client</li><li>Use ESLint, Flow, and Jest tools to check and test your code as your app evolves</li><li>Manage communication between components with Flux</li></ul></div></span>",
            "topic": "React"
        }
    ]
}